{
  "$schema": "http://json.schemastore.org/template",
  "author": "Bnaya Eshet",
  "classifications": ["Web", "WebAPI", "Event-Sourcing", "Redis", "S3", "Kafka"],
  "name": "Event Sourcing Backbone ASP.NET Core Web API / Job",
  "generatorVersions": "[1.0.0.0-*)",
  "description": "A project template for creating an Event Sourcing using `EventSourcing.Backbone` framework over ASP.NET Core application with an example of Controller for producing event and a job example for consuming the event.",
  "groupIdentity": "EventSourcing.Backbone.Template",
  "precedence": "9800",
  "identity": "EventSourcing.Backbone.Template.CSharp.8.0",
  "shortName": "evtsrc",
  "tags": {
    "language": "C#",
    "type": "project",
    "keyword": "event-sourcing"
  },
  "sourceName": "Skeleton",
  "preferNameDirectory": true,
  "guids": [
    "8203A571-4D4C-4621-8971-DB17F84C76F3",
    "2150E333-8FDC-42A3-9474-1A3956D46DE8",
    "D99A8E71-9A1A-468E-9903-784C739BEC8F",
    "9A19103F-16F7-4668-BE54-9A1E7A4F7556",
    "53bc9b9d-9d6a-45d4-8429-2a2761773502",
    "9A19103F-16F7-4668-BE54-9A1E7A4F7556",
    "9A19103F-1111-1111-BE54-9A1E7A4F7556",
    "2150E333-8FDC-42A3-9474-1A3956D46DE8",
    "310ead78-583d-4be8-b5ee-b348770c155d"
  ],
  "sources": [
    {
      "modifiers": [
        {
          "exclude": ["./**/.vs/**", "./**/template_config/**"]
        },
        {
          "condition": "(DisableProducer)",
          "exclude": [
            "Skeleton.Service/Controllers/ProductCycleProducerController.cs",
            "Skeleton.Service/Extensions/ProductCycle/ProductCycleProducerExtensions.cs",
            "Skeleton.Service/Jobs/ProductCycleConsumerJob.cs",
            "Skeleton.Service/Entities/**.*"
            ]
        },
        {
          "condition": "(DisableConsumer)",
          "exclude": [
            "Skeleton.Service/Controllers/ProductCycleConsumerController.cs",
            "Skeleton.Service/Jobs/ProductCycleConsumerJob.cs",
            "Skeleton.Service/Extensions/ConsumerExtensions.cs",
            "Skeleton.Service/Jobs/ProductCycleConsumerJob.cs"
          ]
        },
        {
          "condition": "(EnableConsumer && DisableProducer)",
          "rename": {
            "Skeleton.Service/Jobs/ProductCycleConsumerJob.NoProducer.cs": "Skeleton.Service/Jobs/ProductCycleConsumerJob.cs"
          }
        },
        {
          "condition": "(EnableProducer)",
          "exclude": [
            "Skeleton.Service/Jobs/ProductCycleConsumerJob.NoProducer.cs"
          ]
        },
        {
          "condition": "(DisableGitHubCI)",
          "exclude": [
            ".github/**.*"
          ]
        },
        {
          "condition": "(DisableTelemetry)",
          "exclude": [
            "Skeleton.Service/Extensions/OpenTelemetryExtensions.cs",
            "dockers/compose/**.*",
            "README.md"
          ],
          "rename": {
            "README.no-telemetry.md": "README.md",
            "dockers/compose.no-telemetry": "dockers/compose"
          }
        },
        {
          "condition": "(EnableTelemetry)",
          "exclude": [
            "dockers/compose.no-telemetry/**.*",
            "README.no-telemetry.md"
          ]
        }
      ]
    }
  ],
  "symbols": {
    "EventBundle": {
      "type": "parameter",
      "datatype": "string",
      "replaces": "ProductCycle",
      "FileRename": "ProductCycle",
      "description": "The name of the events-bundle, i.e. Foo will generate IFoo interface for the interface holding the events definitions"
    },
    "NugetVersion": {
      "type": "parameter",
      "datatype": "string",
      "replaces": "{nuget-version}",
      "defaultValue": "1.2.144",
      "description": "The NuGet version of the EventSOurcing.Backbone"
    },
    "DisableProducer": {
      "type": "parameter",
      "dataType": "bool",
      "defaultValue": "false",
      "description": "Remove the Producer code"
    },
    "EnableProducer": {
      "type": "computed",
      "value": "(!DisableProducer)"
    },
    "DisableConsumer": {
      "type": "parameter",
      "dataType": "bool",
      "defaultValue": "false",
      "description": "Remove the Consumer code"
    },
    "EnableConsumer": {
      "type": "computed",
      "value": "(!DisableConsumer)"
    },
    "DisableGitHubCI": {
      "type": "computed",
      "value": "(!EnableGitHubCI)"
    },
    "EnableGitHubCI": {
      "type": "parameter",
      "dataType": "bool",
      "defaultValue": "false",
      "description": "Set-up GitHub workflow (CI)"
    },
    "uri": {
      "type": "parameter",
      "datatype": "string",
      "replaces": "{CHANGE_THE_URI}",
      "defaultValue": "CHANGE_THE_URI",
      "description": "The stream URI."
    },
    "ConcumerGroup": {
      "type": "parameter",
      "datatype": "string",
      "replaces": "{CHANGE_THE_CONSUMER_GROUP}",
      "defaultValue": "main-consumer",
      "description": "The stream Consumer Group."
    },
    "s3": {
      "type": "parameter",
      "datatype": "bool",
      "defaultValue": "false",
      "description": "Whether to have S3 as the events' data storage."
    },
    "s3Credentials": {
      "type": "parameter",
      "description": "Specify the AWS credential method (by default it use the `profile` choice).",
      "datatype": "choice",
      "choices": [
        {
          "choice": "profile",
          "description": "Set a profile and region within `appsettings.json`"
        },
        {
          "choice": "environment-variable",
          "description": "Looks for the following environment variable [`S3_EVENT_SOURCE_REGION`, `S3_EVENT_SOURCE_ACCESS_KEY` and `S3_EVENT_SOURCE_SECRET`]"
        }
      ],
      "defaultValue": "profile"
    },
    "s3Bucket": {
      "type": "parameter",
      "datatype": "string",
      "replaces": "{CHANGE_THE_BUCKET}",
      "defaultValue": "CHANGE_THE_BUCKET",
      "description": "Name of the s3 bucket."
    },
    "awsProfile": {
      "type": "parameter",
      "datatype": "string",
      "defaultValue": "CHANGE_AWS_PROFILE",
      "replaces": "{AWS_PROFILE}",
      "description": "Set the AWS profile. see: https://medium.com/r/?url=https%3A%2F%2Fcodewithmukesh.com%2Fblog%2Faws-credentials-for-dotnet-applications%2F"
    },
    "awsProfileRegion": {
      "type": "parameter",
      "datatype": "string",
      "defaultValue": "CHANGE_AWS_PROFILE_REGION",
      "replaces": "{AWS_PROFILE_REGION}",
      "description": "Set the AWS profile's region. see: https://medium.com/r/?url=https%3A%2F%2Fcodewithmukesh.com%2Fblog%2Faws-credentials-for-dotnet-applications%2F"
    },
    "EmailForCI": {
      "type": "parameter",
      "datatype": "string",
      "replaces": "{ci-email}",
      "defaultValue": "ci@github.com",
      "description": "A valid email for the CI"
    },
    "FrameworkCI": {
      "type": "parameter",
      "description": "The target framework for the project.",
      "datatype": "choice",
      "choices": [
        {
          "choice": "8.0.x",
          "description": "Target net8.0"
        },
        {
          "choice": "7.0.x",
          "description": "Target net8.0"
        }
      ],
      "replaces": "{ci-net-framework}",
      "defaultValue": "7.0.x"
    },
    "Framework": {
      "type": "parameter",
      "description": "The target framework for the project.",
      "datatype": "choice",
      "choices": [
        {
          "choice": "net8.0",
          "description": "Target net8.0"
        },
        {
          "choice": "net7.0",
          "description": "Target net8.0"
        }
      ],
      "replaces": "{net-framework}",
      "defaultValue": "net7.0"
    },
    "DisableOpenAPI": {
      "type": "parameter",
      "dataType": "bool",
      "defaultValue": "false",
      "description": "Disable OpenAPI (Swagger) support"
    },
    "EnableOpenAPI": {
      "type": "computed",
      "value": "(!DisableOpenAPI)"
    },
    "DisableTelemetry": {
      "type": "parameter",
      "dataType": "bool",
      "defaultValue": "false",
      "description": "Disable OpenAPI (Swagger) support"
    },
    "EnableTelemetry": {
      "type": "computed",
      "value": "(!DisableTelemetry)"
    },
    "prometheus": {
      "type": "parameter",
      "datatype": "bool",
      "defaultValue": "true",
      "description": "Use prometheus exporter for Open Telemetry's metrics."
    },
    "ExcludeLaunchSettings": {
      "type": "parameter",
      "datatype": "bool",
      "defaultValue": "false",
      "description": "Whether to exclude launchSettings.json in the generated template."
    },
    "kestrelHttpPort": {
      "type": "parameter",
      "datatype": "integer",
      "description": "Port number to use for the HTTP endpoint in launchSettings.json."
    },
    "kestrelHttpPortGenerated": {
      "type": "generated",
      "generator": "port",
      "parameters": {
        "low": 5000,
        "high": 5300
      }
    },
    "kestrelHttpPortReplacer": {
      "type": "generated",
      "generator": "coalesce",
      "parameters": {
        "sourceVariableName": "kestrelHttpPort",
        "fallbackVariableName": "kestrelHttpPortGenerated"
      },
      "replaces": "5000"
    },
    "kestrelHttpsPort": {
      "type": "parameter",
      "datatype": "integer",
      "description": "Port number to use for the HTTPS endpoint in launchSettings.json. This option is only applicable when the parameter no-https is not used (no-https will be ignored if either IndividualB2C or OrganizationalAuth is used)."
    },
    "kestrelHttpsPortGenerated": {
      "type": "generated",
      "generator": "port",
      "parameters": {
        "low": 7000,
        "high": 7300
      }
    },
    "kestrelHttpsPortReplacer": {
      "type": "generated",
      "generator": "coalesce",
      "parameters": {
        "sourceVariableName": "kestrelHttpsPort",
        "fallbackVariableName": "kestrelHttpsPortGenerated"
      },
      "replaces": "5001"
    },
    "iisHttpPort": {
      "type": "parameter",
      "datatype": "integer",
      "description": "Port number to use for the IIS Express HTTP endpoint in launchSettings.json."
    },
    "iisHttpPortGenerated": {
      "type": "generated",
      "generator": "port"
    },
    "iisHttpPortReplacer": {
      "type": "generated",
      "generator": "coalesce",
      "parameters": {
        "sourceVariableName": "iisHttpPort",
        "fallbackVariableName": "iisHttpPortGenerated"
      },
      "replaces": "8080"
    },
    "iisHttpsPort": {
      "type": "parameter",
      "datatype": "integer",
      "description": "Port number to use for the IIS Express HTTPS endpoint in launchSettings.json. This option is only applicable when the parameter no-https is not used (no-https will be ignored if either IndividualB2C or OrganizationalAuth is used)."
    },
    "iisHttpsPortGenerated": {
      "type": "generated",
      "generator": "port",
      "parameters": {
        "low": 44300,
        "high": 44399
      }
    },
    "iisHttpsPortReplacer": {
      "type": "generated",
      "generator": "coalesce",
      "parameters": {
        "sourceVariableName": "iisHttpsPort",
        "fallbackVariableName": "iisHttpsPortGenerated"
      },
      "replaces": "44300"
    }
  },
  "primaryOutputs": [{ "path": "Skeleton.sln" }],
  "defaultName": "EventSourcingWebApplication",
  "postActions": [
    {
      "id": "restore",
      "condition": "(!skipRestore)",
      "description": "Restore NuGet packages required by this project.",
      "manualInstructions": [
        {
          "text": "Run 'dotnet restore'"
        }
      ],
      "actionId": "210D431B-A78B-4D2F-B762-4ED3E3EA9025",
      "continueOnError": true
    }
  ]
}
